package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/Higor-ViniciusDev/graphql/graph/model"
)

// Cursos is the resolver for the cursos field.
func (r *categoriaResolver) Cursos(ctx context.Context, obj *model.Categoria) ([]*model.Curso, error) {
	cursos, err := r.CursoDB.FindByCategoriaID(obj.ID)

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar cursos por categoria: %w", err)
	}

	var result []*model.Curso
	for _, curso := range cursos {
		result = append(result, &model.Curso{
			ID:        curso.ID,
			Nome:      curso.Nome,
			Descricao: &curso.Descricao,
		})
	}

	return result, nil
}

// Categoria is the resolver for the categoria field.
func (r *cursoResolver) Categoria(ctx context.Context, obj *model.Curso) (*model.Categoria, error) {
	categoria, err := r.CategoriaDB.FindByCursoID(obj.ID)

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar categoria por ID: %w", err)
	}

	return &model.Categoria{
		ID:        categoria.ID,
		Nome:      categoria.Nome,
		Descricao: &categoria.Descricao,
	}, nil
}

// CreateCategoria is the resolver for the createCategoria field.
func (r *mutationResolver) CreateCategoria(ctx context.Context, input model.NewCategoria) (*model.Categoria, error) {
	categoria, err := r.CategoriaDB.Create(input.Nome, *input.Descricao)

	if err != nil {
		return nil, fmt.Errorf("erro ao criar categoria: %w", err)
	}

	return &model.Categoria{
		ID:        categoria.ID,
		Nome:      categoria.Nome,
		Descricao: &categoria.Descricao,
	}, nil
}

// CreateCurso is the resolver for the createCurso field.
func (r *mutationResolver) CreateCurso(ctx context.Context, input model.NewCurso) (*model.Curso, error) {
	curso, err := r.CursoDB.Create(input.Nome, *input.Descricao, input.CategoriaID)

	if err != nil {
		return nil, fmt.Errorf("erro ao criar curso: %w", err)
	}

	return &model.Curso{
		ID:        curso.ID,
		Nome:      curso.Nome,
		Descricao: &curso.Descricao,
	}, nil
}

// Categoria is the resolver for the categoria field.
func (r *queryResolver) Categoria(ctx context.Context) ([]*model.Categoria, error) {
	categorias, err := r.CategoriaDB.FindAll()

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar categorias: %w", err)
	}

	var result []*model.Categoria
	for _, categoria := range categorias {
		result = append(result, &model.Categoria{
			ID:        categoria.ID,
			Nome:      categoria.Nome,
			Descricao: &categoria.Descricao,
		})
	}

	return result, nil
}

// Curso is the resolver for the curso field.
func (r *queryResolver) Curso(ctx context.Context) ([]*model.Curso, error) {
	cursos, err := r.CursoDB.FindAll()

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar cursos: %w", err)
	}

	var result []*model.Curso
	for _, curso := range cursos {
		result = append(result, &model.Curso{
			ID:        curso.ID,
			Nome:      curso.Nome,
			Descricao: &curso.Descricao,
		})
	}

	return result, nil
}

// Categoria returns CategoriaResolver implementation.
func (r *Resolver) Categoria() CategoriaResolver { return &categoriaResolver{r} }

// Curso returns CursoResolver implementation.
func (r *Resolver) Curso() CursoResolver { return &cursoResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoriaResolver struct{ *Resolver }
type cursoResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
