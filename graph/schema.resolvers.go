package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/Higor-ViniciusDev/graphql/graph/model"
)

// CreateCategoria is the resolver for the createCategoria field.
func (r *mutationResolver) CreateCategoria(ctx context.Context, input model.NewCategoria) (*model.Categoria, error) {
	categoria, err := r.CategoriaDB.Create(input.Nome, *input.Descricao)

	if err != nil {
		return nil, fmt.Errorf("erro ao criar categoria: %w", err)
	}

	return &model.Categoria{
		ID:        categoria.ID,
		Nome:      categoria.Nome,
		Descricao: &categoria.Descricao,
	}, nil
}

// CreateCurso is the resolver for the createCurso field.
func (r *mutationResolver) CreateCurso(ctx context.Context, input model.NewCurso) (*model.Curso, error) {
	curso, err := r.CursoDB.Create(input.Nome, *input.Descricao, input.CategoriaID)

	if err != nil {
		return nil, fmt.Errorf("erro ao criar curso: %w", err)
	}

	return &model.Curso{
		ID:        curso.ID,
		Nome:      curso.Nome,
		Descricao: &curso.Descricao,
	}, nil
}

// Categoria is the resolver for the categoria field.
func (r *queryResolver) Categoria(ctx context.Context) ([]*model.Categoria, error) {
	categorias, err := r.CategoriaDB.FindAll()

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar categorias: %w", err)
	}

	var result []*model.Categoria
	for _, categoria := range categorias {
		result = append(result, &model.Categoria{
			ID:        categoria.ID,
			Nome:      categoria.Nome,
			Descricao: &categoria.Descricao,
		})
	}

	return result, nil
}

// Curso is the resolver for the curso field.
func (r *queryResolver) Curso(ctx context.Context) ([]*model.Curso, error) {
	cursos, err := r.CursoDB.FindAll()

	if err != nil {
		return nil, fmt.Errorf("erro ao buscar cursos: %w", err)
	}

	var result []*model.Curso
	for _, curso := range cursos {
		result = append(result, &model.Curso{
			ID:        curso.ID,
			Nome:      curso.Nome,
			Descricao: &curso.Descricao,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
